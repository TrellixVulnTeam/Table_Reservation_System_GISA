{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chirag\\\\Desktop\\\\New folder (2)\\\\client\\\\src\\\\components\\\\Book.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Button } from \"reactstrap\";\nimport Table from \"./Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Book = props => {\n  _s();\n\n  const [totalTables, setTotalTables] = useState([]); // User's selections\n\n  const [selection, setSelection] = useState({\n    table: {\n      name: null,\n      id: null\n    },\n    date: new Date(),\n    time: null,\n    location: \"Any Location\",\n    size: 0\n  }); // User's booking details\n\n  const [booking, setBooking] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  }); // List of potential locations\n\n  const [locations] = useState([\"Any Location\", \"Patio\", \"Inside\", \"Bar\"]);\n  const [times] = useState([\"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\", \"4PM\", \"5PM\"]); // Basic reservation \"validation\"\n\n  const [reservationError, setReservationError] = useState(false);\n\n  const getDate = _ => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const date = months[selection.date.getMonth()] + \" \" + selection.date.getDate() + \" \" + selection.date.getFullYear();\n    let time = selection.time.slice(0, -2);\n    time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\n    console.log(time);\n    const datetime = new Date(date + \" \" + time);\n    return datetime;\n  };\n\n  const getEmptyTables = _ => {\n    let tables = totalTables.filter(table => table.isAvailable);\n    return tables.length;\n  };\n\n  useEffect(() => {\n    // Check availability of tables from DB when a date and time is selected\n    if (selection.time && selection.date) {\n      (async _ => {\n        let datetime = getDate();\n        let res = await fetch(\"http://localhost:3005/availability\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            date: datetime\n          })\n        });\n        res = await res.json(); // Filter available tables with location and group size criteria\n\n        let tables = res.tables.filter(table => (selection.size > 0 ? table.capacity >= selection.size : true) && (selection.location !== \"Any Location\" ? table.location === selection.location : true));\n        setTotalTables(tables);\n      })();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selection.time, selection.date, selection.size, selection.location]); // Make the reservation if all details are filled out\n\n  const reserve = async _ => {\n    if (booking.name.length === 0 | booking.phone.length !== 10 | booking.email.length === 0) {\n      alert(\"Invalid Details\");\n      setReservationError(true);\n    } else {\n      const datetime = getDate();\n      let res = await fetch(\"http://localhost:3005/reserve\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...booking,\n          date: datetime,\n          table: selection.table.id\n        })\n      });\n      res = await res.text();\n      console.log(\"Reserved: \" + res);\n      props.setPage(2);\n    }\n  }; // Clicking on a table sets the selection state\n\n\n  const selectTable = (table_name, table_id) => {\n    setSelection({ ...selection,\n      table: {\n        name: table_name,\n        id: table_id\n      }\n    });\n  }; // Generate party size dropdown\n\n\n  const getSizes = _ => {\n    let newSizes = [];\n\n    for (let i = 1; i < 8; i++) {\n      newSizes.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"booking-dropdown-item\",\n        onClick: e => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            size: i\n          };\n          setSelection(newSel);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this));\n    }\n\n    return newSizes;\n  }; // Generate locations dropdown\n\n\n  const getLocations = _ => {\n    let newLocations = [];\n    locations.forEach(loc => {\n      newLocations.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"booking-dropdown-item\",\n        onClick: _ => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            location: loc\n          };\n          setSelection(newSel);\n        },\n        children: loc\n      }, loc, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this));\n    });\n    return newLocations;\n  }; //Generate time\n\n\n  const getTimes = _ => {\n    let newTimes = [];\n    times.forEach(time => {\n      newTimes.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"booking-dropdown-item\",\n        onClick: _ => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            time: time\n          };\n          setSelection(newSel);\n        },\n        children: time\n      }, time, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this));\n    });\n    return newTimes;\n  }; // Generating tables from available tables state\n\n\n  const getTables = _ => {\n    console.log(\"Getting tables\");\n\n    if (getEmptyTables() > 0) {\n      let tables = [];\n      totalTables.forEach(table => {\n        if (table.isAvailable) {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            empty: true,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this));\n        } else {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this));\n        }\n      });\n      return tables;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      noGutters: true,\n      className: \"text-center align-items-center pizza-cta\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"looking-for-pizza\",\n          style: {\n            fontSize: \"2em\"\n          },\n          children: [!selection.table.id ? \"Booking Table \" : \"Confirm Reservation \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: !selection.table.id ? \"fas fa-chair pizza-slice\" : \"fas fa-clipboard-check pizza-slice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"selected-table\",\n          children: selection.table.id ? \"You are booking table \" + selection.table.name : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), reservationError ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"reservation-error\",\n          children: \"* Please fill out all of the details.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), !selection.table.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"reservation-stuff text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        noGutters: true,\n        className: \"text-center align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            required: \"required\",\n            className: \"booking-dropdown\",\n            value: selection.date.toISOString().split(\"T\")[0],\n            onChange: e => {\n              if (!isNaN(new Date(new Date(e.target.value)))) {\n                let newSel = { ...selection,\n                  table: { ...selection.table\n                  },\n                  date: new Date(e.target.value)\n                };\n                setSelection(newSel);\n              } else {\n                console.log(\"Invalid date\");\n                let newSel = { ...selection,\n                  table: { ...selection.table\n                  },\n                  date: new Date()\n                };\n                setSelection(newSel);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              color: \"none\",\n              caret: true,\n              className: \"booking-dropdown\",\n              children: selection.time === null ? \"Select a Time\" : selection.time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n              right: true,\n              className: \"booking-dropdown-menu\",\n              children: getTimes()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              color: \"none\",\n              caret: true,\n              className: \"booking-dropdown\",\n              children: selection.size === 0 ? \"Select a Party Size\" : selection.size.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n              right: true,\n              className: \"booking-dropdown-menu\",\n              children: getSizes()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        noGutters: true,\n        className: \"tables-display text-center\",\n        style: {\n          width: \"90%\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"available-tables\",\n            children: [getEmptyTables(), \" available\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this) : null, selection.date && selection.time ? getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-key\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"empty-table\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 23\n              }, this), \" \\xA0 Available \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"full-table\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 23\n              }, this), \" \\xA0 Unavailable \\xA0\\xA0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              noGutters: true,\n              children: getTables()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"table-display-message\",\n            children: \"No Available Tables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"table-display-message\",\n            children: \"Please select a date and time for your reservation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"confirm-reservation-stuff\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        noGutters: true,\n        className: \"text-center justify-content-center reservation-details-container\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"3\",\n          className: \"reservation-details\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            bsSize: \"lg\",\n            placeholder: \"Name\",\n            className: \"reservation-input\",\n            value: booking.name,\n            onChange: e => {\n              setBooking({ ...booking,\n                name: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"3\",\n          className: \"reservation-details\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            bsSize: \"lg\",\n            placeholder: \"Phone Number\",\n            className: \"reservation-input\",\n            value: booking.phone,\n            onChange: e => {\n              setBooking({ ...booking,\n                phone: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"3\",\n          className: \"reservation-details\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            bsSize: \"lg\",\n            placeholder: \"Email\",\n            className: \"reservation-input\",\n            value: booking.email,\n            onChange: e => {\n              setBooking({ ...booking,\n                email: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        noGutters: true,\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"none\",\n            className: \"book-table-btn\",\n            onClick: _ => {\n              reserve();\n            },\n            children: \"Book Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Book, \"pzW64UGVehvPxyBCg+Nz8R4PaB8=\");\n\n_c = Book;\nexport default Book;\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["C:/Users/chirag/Desktop/New folder (2)/client/src/components/Book.js"],"names":["React","useState","useEffect","Row","Col","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","Input","Button","Table","Book","props","totalTables","setTotalTables","selection","setSelection","table","name","id","date","Date","time","location","size","booking","setBooking","phone","email","locations","times","reservationError","setReservationError","getDate","_","months","getMonth","getFullYear","slice","console","log","datetime","getEmptyTables","tables","filter","isAvailable","length","res","fetch","method","headers","body","JSON","stringify","json","capacity","reserve","alert","text","setPage","selectTable","table_name","table_id","getSizes","newSizes","i","push","e","newSel","getLocations","newLocations","forEach","loc","getTimes","newTimes","getTables","_id","fontSize","toISOString","split","isNaN","target","value","toString","width","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React ,{ useState, useEffect }from \"react\";\r\nimport {\r\n    Row,\r\n    Col,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Input,\r\n    Button\r\n  } from \"reactstrap\";\r\n\r\n  import Table from \"./Table\";\r\n\r\nconst Book= props =>  {\r\n\r\n    const [totalTables, setTotalTables] = useState([]);\r\n\r\n  // User's selections\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null\r\n    },\r\n    date: new Date(),\r\n    time: null,\r\n    location: \"Any Location\",\r\n    size: 0\r\n  });\r\n\r\n  // User's booking details\r\n  const [booking, setBooking] = useState({\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\"\r\n  });\r\n\r\n   // List of potential locations\r\n   const [locations] = useState([\"Any Location\", \"Patio\", \"Inside\", \"Bar\"]);\r\n\r\n   const [times] = useState([\r\n     \"9AM\",\r\n     \"10AM\",\r\n     \"11AM\",\r\n     \"12PM\",\r\n     \"1PM\",\r\n     \"2PM\",\r\n     \"3PM\",\r\n     \"4PM\",\r\n     \"5PM\"\r\n   ]);\r\n\r\n   // Basic reservation \"validation\"\r\n  const [reservationError, setReservationError] = useState(false);\r\n\r\n  const getDate = _ => {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    const date =\r\n      months[selection.date.getMonth()] +\r\n      \" \" +\r\n      selection.date.getDate() +\r\n      \" \" +\r\n      selection.date.getFullYear();\r\n    let time = selection.time.slice(0, -2);\r\n    time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\r\n    console.log(time);\r\n    const datetime = new Date(date + \" \" + time);\r\n    return datetime;\r\n  };\r\n  \r\n  const getEmptyTables = _ => {\r\n    let tables = totalTables.filter(table => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check availability of tables from DB when a date and time is selected\r\n    if (selection.time && selection.date) {\r\n      (async _ => {\r\n        let datetime = getDate();\r\n        let res = await fetch(\"http://localhost:3005/availability\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            date: datetime\r\n          })\r\n        });\r\n        res = await res.json();\r\n        // Filter available tables with location and group size criteria\r\n        let tables = res.tables.filter(\r\n          table =>\r\n            (selection.size > 0 ? table.capacity >= selection.size : true) &&\r\n            (selection.location !== \"Any Location\"\r\n              ? table.location === selection.location\r\n              : true)\r\n        );\r\n        setTotalTables(tables);\r\n      })();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selection.time, selection.date, selection.size, selection.location]);\r\n\r\n      // Make the reservation if all details are filled out\r\n  const reserve = async _ => {\r\n    if (\r\n      (booking.name.length === 0) |\r\n      (booking.phone.length !== 10) |\r\n      (booking.email.length === 0)\r\n    ) {\r\n      alert(\"Invalid Details\");\r\n      setReservationError(true);\r\n    } \r\n    else {\r\n      const datetime = getDate();\r\n      let res = await fetch(\"http://localhost:3005/reserve\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          ...booking,\r\n          date: datetime,\r\n          table: selection.table.id\r\n        })\r\n      });\r\n      res = await res.text();\r\n      console.log(\"Reserved: \" + res);\r\n      props.setPage(2);\r\n    }\r\n  };\r\n\r\n  // Clicking on a table sets the selection state\r\n  const selectTable = (table_name, table_id) => {\r\n    setSelection({\r\n      ...selection,\r\n      table: {\r\n        name: table_name,\r\n        id: table_id\r\n      }\r\n    });\r\n  };\r\n\r\n  // Generate party size dropdown\r\n  const getSizes = _ => {\r\n    let newSizes = [];\r\n\r\n    for (let i = 1; i < 8; i++) {\r\n      newSizes.push(\r\n        <DropdownItem\r\n          key={i}\r\n          className=\"booking-dropdown-item\"\r\n          onClick={e => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table\r\n              },\r\n              size: i\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {i}\r\n        </DropdownItem>\r\n      );\r\n    }\r\n    return newSizes;\r\n  };\r\n\r\n  // Generate locations dropdown\r\n  const getLocations = _ => {\r\n    let newLocations = [];\r\n    locations.forEach(loc => {\r\n      newLocations.push(\r\n        <DropdownItem\r\n          key={loc}\r\n          className=\"booking-dropdown-item\"\r\n          onClick={_ => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table\r\n              },\r\n              location: loc\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {loc}\r\n        </DropdownItem>\r\n      );\r\n    });\r\n    return newLocations;\r\n  };\r\n\r\n  //Generate time\r\n  const getTimes = _ => {\r\n    let newTimes = [];\r\n    times.forEach(time => {\r\n      newTimes.push(\r\n        <DropdownItem\r\n          key={time}\r\n          className=\"booking-dropdown-item\"\r\n          onClick={_ => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table\r\n              },\r\n              time: time\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {time}\r\n        </DropdownItem>\r\n      );\r\n    });\r\n    return newTimes;\r\n  };\r\n\r\n   // Generating tables from available tables state\r\n   const getTables = _ => {\r\n    console.log(\"Getting tables\");\r\n    if (getEmptyTables() > 0) {\r\n      let tables = [];\r\n      totalTables.forEach(table => {\r\n        if (table.isAvailable) {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              empty\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        } else {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        }\r\n      });\r\n      return tables;\r\n    }\r\n  };\r\n\r\n    return(\r\n      <div>\r\n      <Row noGutters className=\"text-center align-items-center pizza-cta\">\r\n        <Col>\r\n          <i className=\"looking-for-pizza\" style={{fontSize:\"2em\"}}>\r\n            {!selection.table.id ? \"Booking Table \" : \"Confirm Reservation \"}\r\n            <i\r\n              className={\r\n                !selection.table.id\r\n                  ? \"fas fa-chair pizza-slice\"\r\n                  : \"fas fa-clipboard-check pizza-slice\"\r\n              }\r\n            ></i>\r\n          </i>\r\n          <p className=\"selected-table\">\r\n            {selection.table.id\r\n              ? \"You are booking table \" + selection.table.name\r\n              : null}\r\n          </p>\r\n\r\n          {reservationError ? (\r\n            <p className=\"reservation-error\">\r\n              * Please fill out all of the details.\r\n            </p>\r\n          ) : null}\r\n        </Col>\r\n      </Row>\r\n\r\n      {!selection.table.id ? (\r\n        <div id=\"reservation-stuff text-center\">\r\n          <Row noGutters className=\"text-center align-items-center\">\r\n            <Col xs=\"12\" sm=\"4\">\r\n              <input\r\n                type=\"date\"\r\n                required=\"required\"\r\n                className=\"booking-dropdown\"\r\n                value={selection.date.toISOString().split(\"T\")[0]}\r\n                onChange={e => {\r\n                  if (!isNaN(new Date(new Date(e.target.value)))) {\r\n                    let newSel = {\r\n                      ...selection,\r\n                      table: {\r\n                        ...selection.table\r\n                      },\r\n                      date: new Date(e.target.value)\r\n                    };\r\n                    setSelection(newSel);\r\n                  } else {\r\n                    console.log(\"Invalid date\");\r\n                    let newSel = {\r\n                      ...selection,\r\n                      table: {\r\n                        ...selection.table\r\n                      },\r\n                      date: new Date()\r\n                    };\r\n                    setSelection(newSel);\r\n                  }\r\n                }}\r\n              ></input>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"4\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\r\n                  {selection.time === null ? \"Select a Time\" : selection.time}\r\n                </DropdownToggle>\r\n                <DropdownMenu right className=\"booking-dropdown-menu\">\r\n                  {getTimes()}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Col>\r\n            \r\n            <Col xs=\"12\" sm=\"4\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\r\n                  {selection.size === 0\r\n                    ? \"Select a Party Size\"\r\n                    : selection.size.toString()}\r\n                </DropdownToggle>\r\n                <DropdownMenu right className=\"booking-dropdown-menu\">\r\n                  {getSizes()}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Col>\r\n          </Row>\r\n          <Row noGutters className=\"tables-display text-center\" style={{width:\"90%\",marginLeft:\"auto\", marginRight:\"auto\"}}>\r\n            <Col>\r\n              {getEmptyTables() > 0 ? (\r\n                <p className=\"available-tables\">{getEmptyTables()} available</p>\r\n              ) : null}\r\n\r\n              {selection.date && selection.time ? (\r\n                getEmptyTables() > 0 ? (\r\n                  <div>\r\n                    <div className=\"table-key\">\r\n                      <span className=\"empty-table\"></span> &nbsp; Available\r\n                      &nbsp;&nbsp;\r\n                      <span className=\"full-table\"></span> &nbsp; Unavailable\r\n                      &nbsp;&nbsp;\r\n                    </div>\r\n                    <Row noGutters>{getTables()}</Row>\r\n                  </div>\r\n                ) : (\r\n                  <p className=\"table-display-message\">No Available Tables</p>\r\n                )\r\n              ) : (\r\n                <p className=\"table-display-message\">\r\n                  Please select a date and time for your reservation.\r\n                </p>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      ) : (\r\n        <div id=\"confirm-reservation-stuff\">\r\n          <Row\r\n            noGutters\r\n            className=\"text-center justify-content-center reservation-details-container\"\r\n          >\r\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n              <Input\r\n                type=\"text\"\r\n                bsSize=\"lg\"\r\n                placeholder=\"Name\"\r\n                className=\"reservation-input\"\r\n                value={booking.name}\r\n                onChange={e => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    name: e.target.value\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n              <Input\r\n                type=\"text\"\r\n                bsSize=\"lg\"\r\n                placeholder=\"Phone Number\"\r\n                className=\"reservation-input\"\r\n                value={booking.phone}\r\n                onChange={e => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    phone: e.target.value\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n              <Input\r\n                type=\"text\"\r\n                bsSize=\"lg\"\r\n                placeholder=\"Email\"\r\n                className=\"reservation-input\"\r\n                value={booking.email}\r\n                onChange={e => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    email: e.target.value\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row noGutters className=\"text-center\">\r\n            <Col>\r\n              <Button\r\n                color=\"none\"\r\n                className=\"book-table-btn\"\r\n                onClick={_ => {\r\n                  reserve();\r\n                }}\r\n              >\r\n                Book Now\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Book;\r\n"]},"metadata":{},"sourceType":"module"}