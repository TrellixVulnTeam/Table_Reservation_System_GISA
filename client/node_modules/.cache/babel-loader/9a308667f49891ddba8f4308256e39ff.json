{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chirag\\\\Desktop\\\\Reserve\\\\client\\\\src\\\\components\\\\Book.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Button } from \"reactstrap\";\nimport Table from \"./Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Book = props => {\n  _s();\n\n  const [totalTables, setTotalTables] = useState([]); // User's selections\n\n  const [selection, setSelection] = useState({\n    table: {\n      name: null,\n      id: null\n    },\n    date: new Date(),\n    time: null,\n    location: \"Any Location\",\n    size: 0\n  }); // User's booking details\n\n  const [booking, setBooking] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  }); // List of potential locations\n\n  const [locations] = useState([\"Any Location\", \"Patio\", \"Inside\", \"Bar\"]);\n  const [times] = useState([\"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\", \"4PM\", \"5PM\"]); // Basic reservation \"validation\"\n\n  const [reservationError, setReservationError] = useState(false);\n\n  const getDate = _ => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const date = months[selection.date.getMonth()] + \" \" + selection.date.getDate() + \" \" + selection.date.getFullYear();\n    let time = selection.time.slice(0, -2);\n    time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\n    console.log(time);\n    const datetime = new Date(date + \" \" + time);\n    return datetime;\n  };\n\n  const getEmptyTables = _ => {\n    let tables = totalTables.filter(table => table.isAvailable);\n    return tables.length;\n  };\n\n  useEffect(() => {\n    // Check availability of tables from DB when a date and time is selected\n    if (selection.time && selection.date) {\n      (async _ => {\n        let datetime = getDate();\n        let res = await fetch(\"http://localhost:3005/availability\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            date: datetime\n          })\n        });\n        res = await res.json(); // Filter available tables with location and group size criteria\n\n        let tables = res.tables.filter(table => (selection.size > 0 ? table.capacity >= selection.size : true) && (selection.location !== \"Any Location\" ? table.location === selection.location : true));\n        setTotalTables(tables);\n      })();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selection.time, selection.date, selection.size, selection.location]); // Make the reservation if all details are filled out\n\n  const reserve = async _ => {\n    if (booking.name.length === 0 | booking.phone.length === 0 | booking.email.length === 0) {\n      console.log(\"Incomplete Details\");\n      setReservationError(true);\n    } else {\n      const datetime = getDate();\n      let res = await fetch(\"http://localhost:3005/reserve\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...booking,\n          date: datetime,\n          table: selection.table.id\n        })\n      });\n      res = await res.text();\n      console.log(\"Reserved: \" + res);\n      props.setPage(2);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Booking Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Book, \"pzW64UGVehvPxyBCg+Nz8R4PaB8=\");\n\n_c = Book;\nexport default Book;\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["C:/Users/chirag/Desktop/Reserve/client/src/components/Book.js"],"names":["React","useState","useEffect","Row","Col","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","Input","Button","Table","Book","props","totalTables","setTotalTables","selection","setSelection","table","name","id","date","Date","time","location","size","booking","setBooking","phone","email","locations","times","reservationError","setReservationError","getDate","_","months","getMonth","getFullYear","slice","console","log","datetime","getEmptyTables","tables","filter","isAvailable","length","res","fetch","method","headers","body","JSON","stringify","json","capacity","reserve","text","setPage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SACIC,GADJ,EAEIC,GAFJ,EAGIC,oBAHJ,EAIIC,cAJJ,EAKIC,YALJ,EAMIC,YANJ,EAOIC,KAPJ,EAQIC,MARJ,QASS,YATT;AAWE,OAAOC,KAAP,MAAkB,SAAlB;;;AAEF,MAAMC,IAAI,GAAEC,KAAK,IAAK;AAAA;;AAElB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C,CAFkB,CAIpB;;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC;AACzCiB,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,EAAE,EAAE;AAFC,KADkC;AAKzCC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,EALmC;AAMzCC,IAAAA,IAAI,EAAE,IANmC;AAOzCC,IAAAA,QAAQ,EAAE,cAP+B;AAQzCC,IAAAA,IAAI,EAAE;AARmC,GAAD,CAA1C,CALoB,CAgBpB;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC;AACrCkB,IAAAA,IAAI,EAAE,EAD+B;AAErCS,IAAAA,KAAK,EAAE,EAF8B;AAGrCC,IAAAA,KAAK,EAAE;AAH8B,GAAD,CAAtC,CAjBoB,CAuBnB;;AACA,QAAM,CAACC,SAAD,IAAc7B,QAAQ,CAAC,CAAC,cAAD,EAAiB,OAAjB,EAA0B,QAA1B,EAAoC,KAApC,CAAD,CAA5B;AAEA,QAAM,CAAC8B,KAAD,IAAU9B,QAAQ,CAAC,CACvB,KADuB,EAEvB,MAFuB,EAGvB,MAHuB,EAIvB,MAJuB,EAKvB,KALuB,EAMvB,KANuB,EAOvB,KAPuB,EAQvB,KARuB,EASvB,KATuB,CAAD,CAAxB,CA1BmB,CAsCnB;;AACD,QAAM,CAAC+B,gBAAD,EAAmBC,mBAAnB,IAA0ChC,QAAQ,CAAC,KAAD,CAAxD;;AAEA,QAAMiC,OAAO,GAAGC,CAAC,IAAI;AACnB,UAAMC,MAAM,GAAG,CACb,SADa,EAEb,UAFa,EAGb,OAHa,EAIb,OAJa,EAKb,KALa,EAMb,MANa,EAOb,MAPa,EAQb,QARa,EASb,WATa,EAUb,SAVa,EAWb,UAXa,EAYb,UAZa,CAAf;AAcA,UAAMf,IAAI,GACRe,MAAM,CAACpB,SAAS,CAACK,IAAV,CAAegB,QAAf,EAAD,CAAN,GACA,GADA,GAEArB,SAAS,CAACK,IAAV,CAAea,OAAf,EAFA,GAGA,GAHA,GAIAlB,SAAS,CAACK,IAAV,CAAeiB,WAAf,EALF;AAMA,QAAIf,IAAI,GAAGP,SAAS,CAACO,IAAV,CAAegB,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAX;AACAhB,IAAAA,IAAI,GAAGP,SAAS,CAACO,IAAV,GAAiB,EAAjB,GAAsBA,IAAI,GAAG,EAAP,GAAY,KAAlC,GAA0CA,IAAI,GAAG,KAAxD;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AACA,UAAMmB,QAAQ,GAAG,IAAIpB,IAAJ,CAASD,IAAI,GAAG,GAAP,GAAaE,IAAtB,CAAjB;AACA,WAAOmB,QAAP;AACD,GA1BD;;AA4BA,QAAMC,cAAc,GAAGR,CAAC,IAAI;AAC1B,QAAIS,MAAM,GAAG9B,WAAW,CAAC+B,MAAZ,CAAmB3B,KAAK,IAAIA,KAAK,CAAC4B,WAAlC,CAAb;AACA,WAAOF,MAAM,CAACG,MAAd;AACD,GAHD;;AAKA7C,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIc,SAAS,CAACO,IAAV,IAAkBP,SAAS,CAACK,IAAhC,EAAsC;AACpC,OAAC,MAAMc,CAAN,IAAW;AACV,YAAIO,QAAQ,GAAGR,OAAO,EAAtB;AACA,YAAIc,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AAC1DC,UAAAA,MAAM,EAAE,MADkD;AAE1DC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WAFiD;AAK1DC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBjC,YAAAA,IAAI,EAAEqB;AADa,WAAf;AALoD,SAAvC,CAArB;AASAM,QAAAA,GAAG,GAAG,MAAMA,GAAG,CAACO,IAAJ,EAAZ,CAXU,CAYV;;AACA,YAAIX,MAAM,GAAGI,GAAG,CAACJ,MAAJ,CAAWC,MAAX,CACX3B,KAAK,IACH,CAACF,SAAS,CAACS,IAAV,GAAiB,CAAjB,GAAqBP,KAAK,CAACsC,QAAN,IAAkBxC,SAAS,CAACS,IAAjD,GAAwD,IAAzD,MACCT,SAAS,CAACQ,QAAV,KAAuB,cAAvB,GACGN,KAAK,CAACM,QAAN,KAAmBR,SAAS,CAACQ,QADhC,GAEG,IAHJ,CAFS,CAAb;AAOAT,QAAAA,cAAc,CAAC6B,MAAD,CAAd;AACD,OArBD;AAsBD,KAzBa,CA0Bd;;AACD,GA3BQ,EA2BN,CAAC5B,SAAS,CAACO,IAAX,EAAiBP,SAAS,CAACK,IAA3B,EAAiCL,SAAS,CAACS,IAA3C,EAAiDT,SAAS,CAACQ,QAA3D,CA3BM,CAAT,CA1EoB,CAuGhB;;AACJ,QAAMiC,OAAO,GAAG,MAAMtB,CAAN,IAAW;AACzB,QACGT,OAAO,CAACP,IAAR,CAAa4B,MAAb,KAAwB,CAAzB,GACCrB,OAAO,CAACE,KAAR,CAAcmB,MAAd,KAAyB,CAD1B,GAECrB,OAAO,CAACG,KAAR,CAAckB,MAAd,KAAyB,CAH5B,EAIE;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAR,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,KAPD,MAOO;AACL,YAAMS,QAAQ,GAAGR,OAAO,EAAxB;AACA,UAAIc,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AACrDC,QAAAA,MAAM,EAAE,MAD6C;AAErDC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF4C;AAKrDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EACnB,GAAG5B,OADgB;AAEnBL,UAAAA,IAAI,EAAEqB,QAFa;AAGnBxB,UAAAA,KAAK,EAAEF,SAAS,CAACE,KAAV,CAAgBE;AAHJ,SAAf;AAL+C,OAAlC,CAArB;AAWA4B,MAAAA,GAAG,GAAG,MAAMA,GAAG,CAACU,IAAJ,EAAZ;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeO,GAA3B;AACAnC,MAAAA,KAAK,CAAC8C,OAAN,CAAc,CAAd;AACD;AACF,GAzBD;;AA2BE,sBACI;AAAA,2BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAxID;;GAAM/C,I;;KAAAA,I;AA0IN,eAAeA,IAAf","sourcesContent":["import React ,{ useState, useEffect }from \"react\";\r\nimport {\r\n    Row,\r\n    Col,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Input,\r\n    Button\r\n  } from \"reactstrap\";\r\n\r\n  import Table from \"./Table\";\r\n\r\nconst Book= props =>  {\r\n\r\n    const [totalTables, setTotalTables] = useState([]);\r\n\r\n  // User's selections\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null\r\n    },\r\n    date: new Date(),\r\n    time: null,\r\n    location: \"Any Location\",\r\n    size: 0\r\n  });\r\n\r\n  // User's booking details\r\n  const [booking, setBooking] = useState({\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\"\r\n  });\r\n\r\n   // List of potential locations\r\n   const [locations] = useState([\"Any Location\", \"Patio\", \"Inside\", \"Bar\"]);\r\n\r\n   const [times] = useState([\r\n     \"9AM\",\r\n     \"10AM\",\r\n     \"11AM\",\r\n     \"12PM\",\r\n     \"1PM\",\r\n     \"2PM\",\r\n     \"3PM\",\r\n     \"4PM\",\r\n     \"5PM\"\r\n   ]);\r\n\r\n   // Basic reservation \"validation\"\r\n  const [reservationError, setReservationError] = useState(false);\r\n\r\n  const getDate = _ => {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    const date =\r\n      months[selection.date.getMonth()] +\r\n      \" \" +\r\n      selection.date.getDate() +\r\n      \" \" +\r\n      selection.date.getFullYear();\r\n    let time = selection.time.slice(0, -2);\r\n    time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\r\n    console.log(time);\r\n    const datetime = new Date(date + \" \" + time);\r\n    return datetime;\r\n  };\r\n  \r\n  const getEmptyTables = _ => {\r\n    let tables = totalTables.filter(table => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check availability of tables from DB when a date and time is selected\r\n    if (selection.time && selection.date) {\r\n      (async _ => {\r\n        let datetime = getDate();\r\n        let res = await fetch(\"http://localhost:3005/availability\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            date: datetime\r\n          })\r\n        });\r\n        res = await res.json();\r\n        // Filter available tables with location and group size criteria\r\n        let tables = res.tables.filter(\r\n          table =>\r\n            (selection.size > 0 ? table.capacity >= selection.size : true) &&\r\n            (selection.location !== \"Any Location\"\r\n              ? table.location === selection.location\r\n              : true)\r\n        );\r\n        setTotalTables(tables);\r\n      })();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selection.time, selection.date, selection.size, selection.location]);\r\n\r\n      // Make the reservation if all details are filled out\r\n  const reserve = async _ => {\r\n    if (\r\n      (booking.name.length === 0) |\r\n      (booking.phone.length === 0) |\r\n      (booking.email.length === 0)\r\n    ) {\r\n      console.log(\"Incomplete Details\");\r\n      setReservationError(true);\r\n    } else {\r\n      const datetime = getDate();\r\n      let res = await fetch(\"http://localhost:3005/reserve\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          ...booking,\r\n          date: datetime,\r\n          table: selection.table.id\r\n        })\r\n      });\r\n      res = await res.text();\r\n      console.log(\"Reserved: \" + res);\r\n      props.setPage(2);\r\n    }\r\n  };\r\n\r\n    return(\r\n        <div>\r\n        <p>Booking Page</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Book;\r\n"]},"metadata":{},"sourceType":"module"}